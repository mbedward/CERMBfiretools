// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// find_row
int find_row(IntegerMatrix x, int col_index, int value);
RcppExport SEXP _CERMBfiretools_find_row(SEXP xSEXP, SEXP col_indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type col_index(col_indexSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(find_row(x, col_index, value));
    return rcpp_result_gen;
END_RCPP
}
// mat_subset
IntegerMatrix mat_subset(IntegerMatrix x, int col_index, int value);
RcppExport SEXP _CERMBfiretools_mat_subset(SEXP xSEXP, SEXP col_indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type col_index(col_indexSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_subset(x, col_index, value));
    return rcpp_result_gen;
END_RCPP
}
// cell_fire_status
int cell_fire_status(IntegerVector fireyears, int min_threshold, int max_threshold, int year_query, int year_base, bool quiet);
RcppExport SEXP _CERMBfiretools_cell_fire_status(SEXP fireyearsSEXP, SEXP min_thresholdSEXP, SEXP max_thresholdSEXP, SEXP year_querySEXP, SEXP year_baseSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type fireyears(fireyearsSEXP);
    Rcpp::traits::input_parameter< int >::type min_threshold(min_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_threshold(max_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type year_query(year_querySEXP);
    Rcpp::traits::input_parameter< int >::type year_base(year_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(cell_fire_status(fireyears, min_threshold, max_threshold, year_query, year_base, quiet));
    return rcpp_result_gen;
END_RCPP
}
// table_fire_status
IntegerMatrix table_fire_status(IntegerMatrix cell_firehistory, IntegerMatrix cell_veg, IntegerMatrix veg_thresholds, int year_query, int year_base, bool quiet);
RcppExport SEXP _CERMBfiretools_table_fire_status(SEXP cell_firehistorySEXP, SEXP cell_vegSEXP, SEXP veg_thresholdsSEXP, SEXP year_querySEXP, SEXP year_baseSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type cell_firehistory(cell_firehistorySEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type cell_veg(cell_vegSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type veg_thresholds(veg_thresholdsSEXP);
    Rcpp::traits::input_parameter< int >::type year_query(year_querySEXP);
    Rcpp::traits::input_parameter< int >::type year_base(year_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(table_fire_status(cell_firehistory, cell_veg, veg_thresholds, year_query, year_base, quiet));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CERMBfiretools_find_row", (DL_FUNC) &_CERMBfiretools_find_row, 3},
    {"_CERMBfiretools_mat_subset", (DL_FUNC) &_CERMBfiretools_mat_subset, 3},
    {"_CERMBfiretools_cell_fire_status", (DL_FUNC) &_CERMBfiretools_cell_fire_status, 6},
    {"_CERMBfiretools_table_fire_status", (DL_FUNC) &_CERMBfiretools_table_fire_status, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_CERMBfiretools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
